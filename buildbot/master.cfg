# -*- python -*-
# ex: set syntax=python:

import json
import os


def _path(name):
    return os.path.join(os.path.dirname(__file__), name)

# This is a buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# Master variable to toggle config between testing on your personal system
# (where /opt/local shouldn't be messed with) and the production server (where
# it has to be)

production = False
privkey = ''
if os.path.exists(_path('config.json')):
    with open(_path('config.json')) as f:
        configdata = json.load(f)
        production = configdata['production']
        privkey = configdata['privkey']

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave

c['slaves'] = []
slavedata = {}
if production:
    with open(_path('slaves.json')) as f:
        slavedata = json.load(f)
    for slave, pwd in slavedata.items():
        c['slaves'].append(BuildSlave(slave, pwd))
else:
    c['slaves'] = [BuildSlave("snowleopard-x86_64", "pass")]


# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 17000

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

# poller is used for local testing but PBChangeSource (which relies on
# notifications from a post-commit script) should be used in production

if production:
    from buildbot.changes.pb import PBChangeSource
    sourcedata = []
    with open(_path('source.json')) as f:
        sourcedata = json.load(f)
    c['change_source'] = PBChangeSource(user=sourcedata[0], passwd=sourcedata[1], port=sourcedata[2])
else:
    from buildbot.changes.svnpoller import SVNPoller
    c['change_source'] = [SVNPoller(
            'https://svn.macports.org/repository/macports/trunk',
            svnbin='/opt/local/bin/svn',
            pollinterval=300),
        ]

####### SCHEDULERS

def change_has_ports(change):
    for f in change.files:
        if "_resources" in f:
            continue
        if "dports" in f and "Portfile" in f:
            return True
    return False

def change_has_base(change):
    for f in change.files:
        if f.startswith('base'):
            return True
    return False
        
from buildbot.changes.filter import ChangeFilter
portsfilter = ChangeFilter(filter_fn=change_has_ports)
basefilter = ChangeFilter(filter_fn=change_has_base)

from buildbot.schedulers.basic import SingleBranchScheduler
c['schedulers'] = [SingleBranchScheduler(
                            name="base",
                            treeStableTimer=None,
                            change_filter = basefilter,
                            builderNames=["buildbase"]),
                   SingleBranchScheduler(
                            name="ports",
                            treeStableTimer=None,
                            change_filter = portsfilter,
                            builderNames=["buildports"])
                ]

####### BUILDERS

#c['mergeRequests'] = True

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory, GNUAutoconf
from buildbot.process.properties import WithProperties
from buildbot.steps.source import SVN
from buildbot.steps.shell import ShellCommand, Compile

base_factory = GNUAutoconf(source=SVN(svnurl='https://svn.macports.org/repository/macports/trunk/base', mode="copy"),
                             configureFlags=["--enable-readline"],
                             compile=["make", "-j2"],
                             test=["make", "test"])


# custom class to make the file list available on the slave...
class ShellCommandWithPortList(ShellCommand):
         name = 'write portlist file'
         description = 'write portlist file'

         def setBuild(self, build):
            ShellCommand.setBuild(self, build)
            
            # support forced build properties
            try:
                portlist = self.getProperty('portlist').strip()
            except:
                portlist = ''

            portset = set()
            # paths should be dports/category/portdir(/...)
            for f in self.build.allFiles():
                comps = f.split('/')
                if len(comps) >= 3 and comps[0] == 'dports':
                    portset.add(comps[2])
            portlist += ' ' + ' '.join(portset)
            self.setProperty('portlist', portlist)


# can't run with PREFIX/SRC_PREFIX inside the workdir in production,
# because archives must be built with prefix=/opt/local
if production:
    prefix='/opt/local'
    src_prefix='/opt/mports'
    dlhost=''
    dlpath='/www/hosts/packages.macports.org'
    ulpath='archive_staging'
else:
    prefix='%(workdir)s/opt/local'
    src_prefix='%(workdir)s/opt/mports'
    dlhost=''
    dlpath='./deployed_archives'
    ulpath='archive_staging'


ports_factory = BuildFactory()
# get MPAB itself; we'll do the checkout of base and dports via MPAB's script
ports_factory.addStep(SVN(svnurl='https://svn.macports.org/repository/macports/contrib/mpab',
                      mode="update"))
ports_factory.addStep(ShellCommand(command=["./mpsync.sh"],
                                   name="sync",
                                   description="sync",
                      env={'PREFIX': WithProperties(prefix),
                           'SRC_PREFIX': WithProperties(src_prefix),
                           'BASE_UPDATE': 'selfupdate'}))
ports_factory.addStep(ShellCommandWithPortList(command=WithProperties('rm -f portlist; for portname in %(portlist)s; do for subport in `./subports.tcl $portname`; do echo $subport >> portlist; done; done')))
# run MPAB on the port list
ports_factory.addStep(Compile(command=["./mpab", "buildports", "portlist"],
                      env={'PREFIX': WithProperties(prefix),
                           'SRC_PREFIX': WithProperties(src_prefix)},
                      logfiles={"progress": "progress.log"}))

ports_factory.addStep(ShellCommand(command=["./gather_archives.sh"],
                                   name="gather archives",
                                   description="gather distributable archives",
                      env={'PREFIX': WithProperties(prefix),
			   'HOME': '/tmp/',
                           'ULPATH': ulpath}))
# upload archives from build slave to master
from buildbot.steps.transfer import DirectoryUpload
ports_factory.addStep(DirectoryUpload(slavesrc=ulpath, masterdest=ulpath))
# sign generated binaries and sync to download server (if distributable)
from buildbot.steps.master import MasterShellCommand
ports_factory.addStep(MasterShellCommand(command=["./deploy_archives.sh"],
                                   name="deploy archives",
                                   description="deploy archives",
                      env={'PRIVKEY': privkey,
                           'ULPATH': ulpath,
                           'DLHOST': dlhost,
                           'DLPATH': dlpath}))

# make a logfile summarising the success/failure status for each port
ports_factory.addStep(ShellCommand(command=["./do_status.sh"],
                                   name="status",
                                   description="status",
                        env={'PREFIX': WithProperties(prefix),
                             'HOME': '/tmp/',
                             },
                        logfiles={"portstatus": "portstatus.log"}))
# TODO: do we want to upload the individual logs so maintainers can review them?
ports_factory.addStep(ShellCommand(command="rm -rf ./logs-* ./"+ulpath,
                                   name="cleanup",
                                   description="cleanup"))

from buildbot.config import BuilderConfig

if production:
    slavenames = slavedata.keys() 
    baseslaves = filter(lambda x: x.endswith("-base"), slavenames)
    portsslaves = filter(lambda x: x.endswith("-ports"), slavenames)
else:
    slavenames = ["snowleopard-x86_64"]
    baseslaves = slavenames
    portsslaves = slavenames

c['builders']= [
    BuilderConfig(name="buildbase",
                  slavenames=baseslaves,
                  factory=base_factory),
    BuilderConfig(name="buildports",
                  slavenames=portsslaves,
                  factory=ports_factory)
    ]

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import auth, authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = True,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "MacPorts"
c['titleURL'] = "http://www.macports.org/"

if production:
    c['buildbotURL'] = "http://build.macports.org/"
    c['status'].append(html.WebStatus(http_port=8710, authz=authz_cfg))
else:
    c['buildbotURL'] = "http://localhost:8010/"
    c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"

